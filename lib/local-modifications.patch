--- jasmine/lib/jasmine-core/jasmine.js	2017-02-07 17:19:05.530588235 -0800
+++ jasmine-gjs/lib/jasmine.js	2017-02-07 17:06:36.825849025 -0800
@@ -1,3 +1,4 @@
+/* jscs:disable */
 /*
 Copyright (c) 2008-2015 Pivotal Labs
 
@@ -141,7 +142,7 @@
   };
 
   j$.isDomNode = function(obj) {
-    return obj.nodeType > 0;
+    return obj.nodeType && obj.nodeType > 0;
   };
 
   j$.fnNameFor = function(func) {
@@ -204,7 +205,7 @@
   };
 
   j$.isSpy = function(putativeSpy) {
-    if (!putativeSpy) {
+    if (!putativeSpy || !putativeSpy.and) {
       return false;
     }
     return putativeSpy.and instanceof j$.SpyStrategy &&
@@ -504,6 +505,10 @@
     };
 
     var expectationFactory = function(actual, spec) {
+      function addExpectationResult(passed, result) {
+        return spec.addExpectationResult(passed, result);
+      }
+
       return j$.Expectation.Factory({
         util: j$.matchersUtil,
         customEqualityTesters: runnableResources[spec.id].customEqualityTesters,
@@ -511,10 +516,6 @@
         actual: actual,
         addExpectationResult: addExpectationResult
       });
-
-      function addExpectationResult(passed, result) {
-        return spec.addExpectationResult(passed, result);
-      }
     };
 
     var defaultResourcesForRunnable = function(id, parentRunnableId) {
@@ -661,6 +662,12 @@
     };
 
     var suiteFactory = function(description) {
+      function suiteStarted(suite) {
+        currentlyExecutingSuites.push(suite);
+        defaultResourcesForRunnable(suite.id, suite.parentSuite.id);
+        reporter.suiteStarted(suite.result);
+      }
+
       var suite = new j$.Suite({
         env: self,
         id: getNextSuiteId(),
@@ -682,12 +689,6 @@
 
       runnableLookupTable[suite.id] = suite;
       return suite;
-
-      function suiteStarted(suite) {
-        currentlyExecutingSuites.push(suite);
-        defaultResourcesForRunnable(suite.id, suite.parentSuite.id);
-        reporter.suiteStarted(suite.result);
-      }
     };
 
     this.describe = function(description, specDefinitions) {
@@ -786,14 +787,6 @@
         }
       });
 
-      runnableLookupTable[spec.id] = spec;
-
-      if (!self.specFilter(spec)) {
-        spec.disable();
-      }
-
-      return spec;
-
       function specResultCallback(result) {
         clearResourcesForRunnable(spec.id);
         currentSpec = null;
@@ -805,6 +798,14 @@
         defaultResourcesForRunnable(spec.id, suite.id);
         reporter.specStarted(spec.result);
       }
+
+      runnableLookupTable[spec.id] = spec;
+
+      if (!self.specFilter(spec)) {
+        spec.disable();
+      }
+
+      return spec;
     };
 
     this.it = function(description, fn, timeout) {
@@ -1099,8 +1100,6 @@
       }
     };
 
-    return self;
-
     function legacyIE() {
       //if these methods are polyfilled, apply will be present
       return !(realTimingFunctions.setTimeout || realTimingFunctions.setInterval).apply;
@@ -1131,6 +1130,8 @@
     function argSlice(argsObj, n) {
       return Array.prototype.slice.call(argsObj, n);
     }
+
+    return self;
   }
 
   return Clock;
@@ -1217,8 +1218,6 @@
       delayedFnCount = 0;
     };
 
-    return self;
-
     function indexOfFirstToPass(array, testFn) {
       var index = -1;
 
@@ -1284,6 +1283,8 @@
                  currentTime !== endTime  &&
                  scheduledLookup[0] <= endTime);
     }
+
+    return self;
   }
 
   return DelayedFunctionScheduler;
@@ -1431,8 +1432,6 @@
       result.actual = options.actual;
     }
 
-    return result;
-
     function message() {
       if (options.passed) {
         return 'Passed.';
@@ -1459,6 +1458,8 @@
       }
       return stackFormatter(error);
     }
+
+    return result;
   }
 
   return buildExpectationResult;
@@ -1500,8 +1501,6 @@
 
     createDateProperties();
 
-    return self;
-
     function FakeDate() {
       switch(arguments.length) {
         case 0:
@@ -1542,7 +1541,9 @@
       FakeDate.parse = GlobalDate.parse;
       FakeDate.UTC = GlobalDate.UTC;
     }
-	}
+
+    return self;
+  }
 
   return MockDate;
 };
@@ -1812,8 +1813,6 @@
       reporters.push(reporter);
     };
 
-    return this;
-
     function dispatch(method, args) {
       for (var i = 0; i < reporters.length; i++) {
         var reporter = reporters[i];
@@ -1822,6 +1821,8 @@
         }
       }
     }
+
+    return this;
   }
 
   return ReportDispatcher;
@@ -2295,58 +2296,8 @@
 getJasmineRequireObj().matchersUtil = function(j$) {
   // TODO: what to do about jasmine.pp not being inject? move to JSON.stringify? gut PrettyPrinter?
 
-  return {
-    equals: function(a, b, customTesters) {
-      customTesters = customTesters || [];
-
-      return eq(a, b, [], [], customTesters);
-    },
-
-    contains: function(haystack, needle, customTesters) {
-      customTesters = customTesters || [];
-
-      if ((Object.prototype.toString.apply(haystack) === '[object Array]') ||
-        (!!haystack && !haystack.indexOf))
-      {
-        for (var i = 0; i < haystack.length; i++) {
-          if (eq(haystack[i], needle, [], [], customTesters)) {
-            return true;
-          }
-        }
-        return false;
-      }
-
-      return !!haystack && haystack.indexOf(needle) >= 0;
-    },
-
-    buildFailureMessage: function() {
-      var args = Array.prototype.slice.call(arguments, 0),
-        matcherName = args[0],
-        isNot = args[1],
-        actual = args[2],
-        expected = args.slice(3),
-        englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); });
-
-      var message = 'Expected ' +
-        j$.pp(actual) +
-        (isNot ? ' not ' : ' ') +
-        englishyPredicate;
-
-      if (expected.length > 0) {
-        for (var i = 0; i < expected.length; i++) {
-          if (i > 0) {
-            message += ',';
-          }
-          message += ' ' + j$.pp(expected[i]);
-        }
-      }
-
-      return message + '.';
-    }
-  };
-
   function isAsymmetric(obj) {
-    return obj && j$.isA_('Function', obj.asymmetricMatch);
+    return obj && obj.asymmetricMatch && j$.isA_('Function', obj.asymmetricMatch);
   }
 
   function asymmetricMatch(a, b) {
@@ -2364,6 +2315,8 @@
     if (asymmetricB) {
       return b.asymmetricMatch(a);
     }
+
+    return undefined;
   }
 
   // Equality function lovingly adapted from isEqual in
@@ -2488,8 +2441,6 @@
     aStack.pop();
     bStack.pop();
 
-    return result;
-
     function has(obj, key) {
       return Object.prototype.hasOwnProperty.call(obj, key);
     }
@@ -2497,7 +2448,59 @@
     function isFunction(obj) {
       return typeof obj === 'function';
     }
+
+    return result;
   }
+
+  return {
+    equals: function(a, b, customTesters) {
+      customTesters = customTesters || [];
+
+      return eq(a, b, [], [], customTesters);
+    },
+
+    contains: function(haystack, needle, customTesters) {
+      customTesters = customTesters || [];
+
+      if ((Object.prototype.toString.apply(haystack) === '[object Array]') ||
+        (!!haystack && !haystack.indexOf))
+      {
+        for (var i = 0; i < haystack.length; i++) {
+          if (eq(haystack[i], needle, [], [], customTesters)) {
+            return true;
+          }
+        }
+        return false;
+      }
+
+      return !!haystack && haystack.indexOf(needle) >= 0;
+    },
+
+    buildFailureMessage: function() {
+      var args = Array.prototype.slice.call(arguments, 0),
+        matcherName = args[0],
+        isNot = args[1],
+        actual = args[2],
+        expected = args.slice(3),
+        englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); });
+
+      var message = 'Expected ' +
+        j$.pp(actual) +
+        (isNot ? ' not ' : ' ') +
+        englishyPredicate;
+
+      if (expected.length > 0) {
+        for (var i = 0; i < expected.length; i++) {
+          if (i > 0) {
+            message += ',';
+          }
+          message += ' ' + j$.pp(expected[i]);
+        }
+      }
+
+      return message + '.';
+    }
+  };
 };
 
 getJasmineRequireObj().toBe = function() {
@@ -2830,56 +2833,6 @@
 
 getJasmineRequireObj().toThrowError = function(j$) {
   function toThrowError (util) {
-    return {
-      compare: function(actual) {
-        var threw = false,
-          pass = {pass: true},
-          fail = {pass: false},
-          thrown;
-
-        if (typeof actual != 'function') {
-          throw new Error('Actual is not a Function');
-        }
-
-        var errorMatcher = getMatcher.apply(null, arguments);
-
-        try {
-          actual();
-        } catch (e) {
-          threw = true;
-          thrown = e;
-        }
-
-        if (!threw) {
-          fail.message = 'Expected function to throw an Error.';
-          return fail;
-        }
-
-        if (!(thrown instanceof Error)) {
-          fail.message = function() { return 'Expected function to throw an Error, but it threw ' + j$.pp(thrown) + '.'; };
-          return fail;
-        }
-
-        if (errorMatcher.hasNoSpecifics()) {
-          pass.message = 'Expected function not to throw an Error, but it threw ' + j$.fnNameFor(thrown) + '.';
-          return pass;
-        }
-
-        if (errorMatcher.matches(thrown)) {
-          pass.message = function() {
-            return 'Expected function not to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() + '.';
-          };
-          return pass;
-        } else {
-          fail.message = function() {
-            return 'Expected function to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() +
-              ', but it threw ' + errorMatcher.thrownDescription(thrown) + '.';
-          };
-          return fail;
-        }
-      }
-    };
-
     function getMatcher() {
       var expected = null,
           errorType = null;
@@ -2958,6 +2911,56 @@
       Surrogate.prototype = type.prototype;
       return (new Surrogate()) instanceof Error;
     }
+
+    return {
+      compare: function(actual) {
+        var threw = false,
+          pass = {pass: true},
+          fail = {pass: false},
+          thrown;
+
+        if (typeof actual != 'function') {
+          throw new Error('Actual is not a Function');
+        }
+
+        var errorMatcher = getMatcher.apply(null, arguments);
+
+        try {
+          actual();
+        } catch (e) {
+          threw = true;
+          thrown = e;
+        }
+
+        if (!threw) {
+          fail.message = 'Expected function to throw an Error.';
+          return fail;
+        }
+
+        if (!(thrown instanceof Error)) {
+          fail.message = function() { return 'Expected function to throw an Error, but it threw ' + j$.pp(thrown) + '.'; };
+          return fail;
+        }
+
+        if (errorMatcher.hasNoSpecifics()) {
+          pass.message = 'Expected function not to throw an Error, but it threw ' + j$.fnNameFor(thrown) + '.';
+          return pass;
+        }
+
+        if (errorMatcher.matches(thrown)) {
+          pass.message = function() {
+            return 'Expected function not to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() + '.';
+          };
+          return pass;
+        } else {
+          fail.message = function() {
+            return 'Expected function to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() +
+              ', but it threw ' + errorMatcher.thrownDescription(thrown) + '.';
+          };
+          return fail;
+        }
+      }
+    };
   }
 
   return toThrowError;
@@ -3044,5 +3047,5 @@
 };
 
 getJasmineRequireObj().version = function() {
-  return '2.2.0';
+  return '2.2.1';
 };
